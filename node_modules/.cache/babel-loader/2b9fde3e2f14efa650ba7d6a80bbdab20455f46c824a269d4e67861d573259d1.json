{"ast":null,"code":"import axios from 'axios';\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000 //, // 30초\n  // headers: {\n  //   'Content-Type': 'application/json'\n  // }\n});\n\n/**\r\n * LLM API와 통신하는 함수\r\n * @param {string} query - 사용자 질의 내용\r\n * @param {string} language - 언어 코드 (기본값: \"ko\")\r\n * @param {Object} additionalParams - 서비스별 추가 파라미터\r\n * @returns {Promise<Object>} API 응답 결과\r\n */\nexport const askLLMApi = async (query, language = \"ko\") => {\n  try {\n    // API 요청 데이터 준비\n    query = query.replace(\"\\n\", \"\");\n    const payload = {\n      query,\n      language\n      // language,\n      // ...additionalParams\n    };\n\n    // API 호출\n    console.log(\"🔥 API 호출전\");\n    const response = await api.post('/llm', payload);\n    // const response = await api.post('/llm', { query, language });\n    console.log(\"📥 응답:\", response.data);\n    console.log(\"✅ response.data:\", response.data.data);\n    return {\n      success: true,\n      data: response.data.data\n    };\n    // return { success: true, data: response.data };\n  } catch (error) {\n    // console.error(response)\n    console.error(\"🔥 전체 에러:\", error);\n    console.error(\"📦 error.response:\", error.response);\n    console.error(\"📡 error.request:\", error.request);\n\n    // 오류 유형에 따른 메시지 생성\n    let errorMessage = '알 수 없는 오류가 발생했습니다.';\n    if (error.code === 'ECONNABORTED') {\n      errorMessage = 'API 요청 시간이 초과되었습니다. 나중에 다시 시도해주세요.';\n    } else if (error.response) {\n      // 서버에서 응답을 받았지만 오류 상태 코드가 반환된 경우\n      errorMessage = `서버 오류: ${error.response.status}`;\n      if (error.response.data && error.response.data.error) {\n        errorMessage = error.response.data.error;\n      }\n    } else if (error.request) {\n      // 요청이 이루어졌지만 응답을 받지 못한 경우\n      errorMessage = 'API 서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.apiService2';\n    }\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// export default {\n//   askLLMApi\n// }; \n\nconst apiService = {\n  askLLMApi\n};\nexport default apiService;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","askLLMApi","query","language","replace","payload","console","log","response","post","data","success","error","request","errorMessage","code","status","apiService"],"sources":["D:/01_study/react_app/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 30000//, // 30초\r\n  // headers: {\r\n  //   'Content-Type': 'application/json'\r\n  // }\r\n});\r\n\r\n/**\r\n * LLM API와 통신하는 함수\r\n * @param {string} query - 사용자 질의 내용\r\n * @param {string} language - 언어 코드 (기본값: \"ko\")\r\n * @param {Object} additionalParams - 서비스별 추가 파라미터\r\n * @returns {Promise<Object>} API 응답 결과\r\n */\r\nexport const askLLMApi = async (query, language = \"ko\") => {\r\n  try {\r\n    // API 요청 데이터 준비\r\n    query = query.replace(\"\\n\", \"\")\r\n    const payload = {\r\n      query,\r\n      language\r\n      // language,\r\n      // ...additionalParams\r\n    };\r\n    \r\n    // API 호출\r\n    console.log(\"🔥 API 호출전\");\r\n    const response = await api.post('/llm', payload);\r\n    // const response = await api.post('/llm', { query, language });\r\n    console.log(\"📥 응답:\", response.data);\r\n    console.log(\"✅ response.data:\", response.data.data);\r\n    return { success: true, data: response.data.data };\r\n    // return { success: true, data: response.data };\r\n  } catch (error) {\r\n    // console.error(response)\r\n    console.error(\"🔥 전체 에러:\", error);\r\n    console.error(\"📦 error.response:\", error.response);\r\n    console.error(\"📡 error.request:\", error.request);\r\n    \r\n    // 오류 유형에 따른 메시지 생성\r\n    let errorMessage = '알 수 없는 오류가 발생했습니다.';\r\n    \r\n    if (error.code === 'ECONNABORTED') {\r\n      errorMessage = 'API 요청 시간이 초과되었습니다. 나중에 다시 시도해주세요.';\r\n    } else if (error.response) {\r\n      // 서버에서 응답을 받았지만 오류 상태 코드가 반환된 경우\r\n      errorMessage = `서버 오류: ${error.response.status}`;\r\n      if (error.response.data && error.response.data.error) {\r\n        errorMessage = error.response.data.error;\r\n      }\r\n    } else if (error.request) {\r\n      // 요청이 이루어졌지만 응답을 받지 못한 경우\r\n      errorMessage = 'API 서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.apiService2';\r\n    }\r\n    \r\n    return { success: false, error: errorMessage };\r\n  }\r\n};\r\n\r\n// export default {\r\n//   askLLMApi\r\n// }; \r\n\r\nconst apiService = {\r\n  askLLMApi\r\n};\r\n\r\nexport default apiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACd;EACA;EACA;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,GAAG,IAAI,KAAK;EACzD,IAAI;IACF;IACAD,KAAK,GAAGA,KAAK,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IAC/B,MAAMC,OAAO,GAAG;MACdH,KAAK;MACLC;MACA;MACA;IACF,CAAC;;IAED;IACAG,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IACzB,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,MAAM,EAAEJ,OAAO,CAAC;IAChD;IACAC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEC,QAAQ,CAACE,IAAI,CAAC;IACpCJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACE,IAAI,CAACA,IAAI,CAAC;IACnD,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAED,IAAI,EAAEF,QAAQ,CAACE,IAAI,CAACA;IAAK,CAAC;IAClD;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAN,OAAO,CAACM,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjCN,OAAO,CAACM,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACJ,QAAQ,CAAC;IACnDF,OAAO,CAACM,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,OAAO,CAAC;;IAEjD;IACA,IAAIC,YAAY,GAAG,oBAAoB;IAEvC,IAAIF,KAAK,CAACG,IAAI,KAAK,cAAc,EAAE;MACjCD,YAAY,GAAG,oCAAoC;IACrD,CAAC,MAAM,IAAIF,KAAK,CAACJ,QAAQ,EAAE;MACzB;MACAM,YAAY,GAAG,UAAUF,KAAK,CAACJ,QAAQ,CAACQ,MAAM,EAAE;MAChD,IAAIJ,KAAK,CAACJ,QAAQ,CAACE,IAAI,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACE,KAAK,EAAE;QACpDE,YAAY,GAAGF,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACE,KAAK;MAC1C;IACF,CAAC,MAAM,IAAIA,KAAK,CAACC,OAAO,EAAE;MACxB;MACAC,YAAY,GAAG,iDAAiD;IAClE;IAEA,OAAO;MAAEH,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAEE;IAAa,CAAC;EAChD;AACF,CAAC;;AAED;AACA;AACA;;AAEA,MAAMG,UAAU,GAAG;EACjBhB;AACF,CAAC;AAED,eAAegB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}