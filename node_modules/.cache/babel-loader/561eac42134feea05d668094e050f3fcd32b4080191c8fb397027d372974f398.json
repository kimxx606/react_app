{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSession } from '../contexts/SessionContext';\nimport { askLLMApi } from '../services/apiService';\n\n/**\r\n * 채팅 기능을 관리하는 커스텀 훅\r\n * @param {string} serviceId - 서비스 식별자\r\n * @returns {Object} 채팅 관련 상태와 함수\r\n */\nconst useChat = serviceId => {\n  _s();\n  const {\n    sessionState,\n    updateSessionState\n  } = useSession();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatContainerRef = useRef(null);\n  const bottomRef = useRef(null); // ✅ 추가\n\n  const messages = sessionState[`${serviceId}_messages`] || [];\n  const language = sessionState[`${serviceId}_language`] || 'ko';\n  const saveMessages = newMessages => {\n    updateSessionState(`${serviceId}_messages`, newMessages);\n  };\n  const setLanguage = newLanguage => {\n    updateSessionState(`${serviceId}_language`, newLanguage);\n  };\n  const clearMessages = () => {\n    saveMessages([]);\n  };\n  const scrollToBottom = useCallback(() => {\n    if (bottomRef.current) {\n      bottomRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n    const t1 = setTimeout(scrollToBottom, 100);\n    const t2 = setTimeout(scrollToBottom, 300);\n    return () => {\n      clearTimeout(t1);\n      clearTimeout(t2);\n    };\n  }, [messages, isLoading, scrollToBottom]);\n  const sendMessage = async query => {\n    if (!query.trim()) return;\n    const userMessage = {\n      role: 'user',\n      content: query\n    };\n    const updatedMessages = [...messages, userMessage];\n    saveMessages(updatedMessages);\n    setIsLoading(true);\n    try {\n      const result = await askLLMApi(query, language);\n      const assistantMessage = {\n        role: 'assistant',\n        content: result.success ? result.data.result || '응답을 받지 못했습니다.' : `오류가 발생했습니다: ${result.error || '알 수 없는 오류'}`,\n        isError: !result.success\n      };\n      saveMessages([...updatedMessages, assistantMessage]);\n    } catch (error) {\n      console.error('메시지 전송 중 오류:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: '오류가 발생했습니다. 나중에 다시 시도해주세요.',\n        isError: true\n      };\n      saveMessages([...updatedMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSampleQuestion = question => {\n    sendMessage(question);\n  };\n  return {\n    messages,\n    isLoading,\n    language,\n    chatContainerRef,\n    bottomRef,\n    // ✅ 추가\n    sendMessage,\n    clearMessages,\n    setLanguage,\n    handleSampleQuestion\n  };\n};\n_s(useChat, \"xNE7idboJzPU9G0Y5Dn8dOav0eM=\", false, function () {\n  return [useSession];\n});\nexport default useChat;","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useSession","askLLMApi","useChat","serviceId","_s","sessionState","updateSessionState","isLoading","setIsLoading","chatContainerRef","bottomRef","messages","language","saveMessages","newMessages","setLanguage","newLanguage","clearMessages","scrollToBottom","current","scrollIntoView","behavior","t1","setTimeout","t2","clearTimeout","sendMessage","query","trim","userMessage","role","content","updatedMessages","result","assistantMessage","success","data","error","isError","console","errorMessage","handleSampleQuestion","question"],"sources":["D:/01_study/react_app/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { useSession } from '../contexts/SessionContext';\r\nimport { askLLMApi } from '../services/apiService';\r\n\r\n/**\r\n * 채팅 기능을 관리하는 커스텀 훅\r\n * @param {string} serviceId - 서비스 식별자\r\n * @returns {Object} 채팅 관련 상태와 함수\r\n */\r\nconst useChat = (serviceId) => {\r\n  const { sessionState, updateSessionState } = useSession();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatContainerRef = useRef(null);\r\n  const bottomRef = useRef(null); // ✅ 추가\r\n\r\n  const messages = sessionState[`${serviceId}_messages`] || [];\r\n  const language = sessionState[`${serviceId}_language`] || 'ko';\r\n\r\n  const saveMessages = (newMessages) => {\r\n    updateSessionState(`${serviceId}_messages`, newMessages);\r\n  };\r\n\r\n  const setLanguage = (newLanguage) => {\r\n    updateSessionState(`${serviceId}_language`, newLanguage);\r\n  };\r\n\r\n  const clearMessages = () => {\r\n    saveMessages([]);\r\n  };\r\n\r\n  const scrollToBottom = useCallback(() => {\r\n    if (bottomRef.current) {\r\n      bottomRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n    const t1 = setTimeout(scrollToBottom, 100);\r\n    const t2 = setTimeout(scrollToBottom, 300);\r\n    return () => {\r\n      clearTimeout(t1);\r\n      clearTimeout(t2);\r\n    };\r\n  }, [messages, isLoading, scrollToBottom]);\r\n\r\n  const sendMessage = async (query) => {\r\n    if (!query.trim()) return;\r\n\r\n    const userMessage = { role: 'user', content: query };\r\n    const updatedMessages = [...messages, userMessage];\r\n    saveMessages(updatedMessages);\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const result = await askLLMApi(query, language);\r\n\r\n      const assistantMessage = {\r\n        role: 'assistant',\r\n        content: result.success\r\n          ? result.data.result || '응답을 받지 못했습니다.'\r\n          : `오류가 발생했습니다: ${result.error || '알 수 없는 오류'}`,\r\n        isError: !result.success\r\n      };\r\n\r\n      saveMessages([...updatedMessages, assistantMessage]);\r\n    } catch (error) {\r\n      console.error('메시지 전송 중 오류:', error);\r\n      const errorMessage = {\r\n        role: 'assistant',\r\n        content: '오류가 발생했습니다. 나중에 다시 시도해주세요.',\r\n        isError: true\r\n      };\r\n      saveMessages([...updatedMessages, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSampleQuestion = (question) => {\r\n    sendMessage(question);\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    language,\r\n    chatContainerRef,\r\n    bottomRef, // ✅ 추가\r\n    sendMessage,\r\n    clearMessages,\r\n    setLanguage,\r\n    handleSampleQuestion\r\n  };\r\n};\r\n\r\nexport default useChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}