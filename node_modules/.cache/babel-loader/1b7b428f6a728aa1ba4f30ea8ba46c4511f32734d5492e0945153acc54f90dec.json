{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useSession } from '../contexts/SessionContext';\nimport { askLLMApi } from '../services/apiService';\n\n/**\r\n * 채팅 기능을 관리하는 커스텀 훅\r\n * @param {string} serviceId - 서비스 식별자\r\n * @returns {Object} 채팅 관련 상태와 함수\r\n */\nconst useChat = serviceId => {\n  _s();\n  const {\n    sessionState,\n    updateSessionState\n  } = useSession();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  // 세션 스토리지에서 메시지 가져오기 또는 기본값 설정\n  const messages = sessionState[`${serviceId}_messages`] || [];\n  const language = sessionState[`${serviceId}_language`] || 'ko';\n\n  // 메시지 저장 함수\n  const saveMessages = newMessages => {\n    updateSessionState(`${serviceId}_messages`, newMessages);\n  };\n\n  // 언어 변경 함수\n  const setLanguage = newLanguage => {\n    updateSessionState(`${serviceId}_language`, newLanguage);\n  };\n\n  // 메시지 초기화 함수\n  const clearMessages = () => {\n    saveMessages([]);\n  };\n\n  // 스크롤 기능\n  useEffect(() => {\n    const scrollToBottom = () => {\n      if (chatContainerRef.current) {\n        const scrollHeight = chatContainerRef.current.scrollHeight;\n        chatContainerRef.current.scrollTop = scrollHeight;\n      }\n    };\n\n    // 즉시 실행\n    scrollToBottom();\n\n    // DOM 업데이트 후 다시 실행\n    const timer1 = setTimeout(scrollToBottom, 0);\n    // 콘텐츠 로드 후 실행\n    const timer2 = setTimeout(scrollToBottom, 100);\n    // 더 긴 시간 후 다시 실행 (느린 렌더링, 이미지 로드 등 대비)\n    const timer3 = setTimeout(scrollToBottom, 500);\n    return () => {\n      clearTimeout(timer1);\n      clearTimeout(timer2);\n      clearTimeout(timer3);\n    };\n  }, [messages, isLoading]);\n\n  // 메시지 전송 함수\n  const sendMessage = async query => {\n    if (!query.trim()) return;\n\n    // 사용자 메시지 추가\n    const userMessage = {\n      role: 'user',\n      content: query\n    };\n    const updatedMessages = [...messages, userMessage];\n    saveMessages(updatedMessages);\n\n    // 사용자 메시지 추가 후 스크롤\n    setTimeout(() => {\n      if (chatContainerRef.current) {\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      }\n    }, 0);\n\n    // API 호출\n    setIsLoading(true);\n    try {\n      const result = await askLLMApi(query, language);\n      if (result.success) {\n        // 성공 응답 처리\n        const assistantMessage = {\n          role: 'assistant',\n          content: result.data.result || '응답을 받지 못했습니다.'\n        };\n        saveMessages([...updatedMessages, assistantMessage]);\n\n        // 응답 메시지 추가 후 스크롤\n        setTimeout(() => {\n          if (chatContainerRef.current) {\n            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n          }\n        }, 0);\n      } else {\n        // 오류 응답 처리\n        const errorMessage = {\n          role: 'assistant',\n          content: `오류가 발생했습니다: ${result.error || '알 수 없는 오류'}`,\n          isError: true\n        };\n        saveMessages([...updatedMessages, errorMessage]);\n      }\n    } catch (error) {\n      console.error('메시지 전송 중 오류:', error);\n      const errorMessage = {\n        role: 'assistant',\n        content: '오류가 발생했습니다. 나중에 다시 시도해주세요.',\n        isError: true\n      };\n      saveMessages([...updatedMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 대표 질문 처리 함수\n  const handleSampleQuestion = question => {\n    sendMessage(question);\n  };\n  return {\n    messages,\n    isLoading,\n    language,\n    chatContainerRef,\n    sendMessage,\n    clearMessages,\n    setLanguage,\n    handleSampleQuestion\n  };\n};\n_s(useChat, \"YIZodMSa+pThxRb2JYgSCTk3E0o=\", false, function () {\n  return [useSession];\n});\nexport default useChat;","map":{"version":3,"names":["useState","useEffect","useRef","useSession","askLLMApi","useChat","serviceId","_s","sessionState","updateSessionState","isLoading","setIsLoading","chatContainerRef","messages","language","saveMessages","newMessages","setLanguage","newLanguage","clearMessages","scrollToBottom","current","scrollHeight","scrollTop","timer1","setTimeout","timer2","timer3","clearTimeout","sendMessage","query","trim","userMessage","role","content","updatedMessages","result","success","assistantMessage","data","errorMessage","error","isError","console","handleSampleQuestion","question"],"sources":["D:/01_study/react_app/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { useSession } from '../contexts/SessionContext';\r\nimport { askLLMApi } from '../services/apiService';\r\n\r\n/**\r\n * 채팅 기능을 관리하는 커스텀 훅\r\n * @param {string} serviceId - 서비스 식별자\r\n * @returns {Object} 채팅 관련 상태와 함수\r\n */\r\nconst useChat = (serviceId) => {\r\n  const { sessionState, updateSessionState } = useSession();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatContainerRef = useRef(null);\r\n  \r\n  // 세션 스토리지에서 메시지 가져오기 또는 기본값 설정\r\n  const messages = sessionState[`${serviceId}_messages`] || [];\r\n  const language = sessionState[`${serviceId}_language`] || 'ko';\r\n  \r\n  // 메시지 저장 함수\r\n  const saveMessages = (newMessages) => {\r\n    updateSessionState(`${serviceId}_messages`, newMessages);\r\n  };\r\n  \r\n  // 언어 변경 함수\r\n  const setLanguage = (newLanguage) => {\r\n    updateSessionState(`${serviceId}_language`, newLanguage);\r\n  };\r\n  \r\n  // 메시지 초기화 함수\r\n  const clearMessages = () => {\r\n    saveMessages([]);\r\n  };\r\n  \r\n  // 스크롤 기능\r\n  useEffect(() => {\r\n    const scrollToBottom = () => {\r\n      if (chatContainerRef.current) {\r\n        const scrollHeight = chatContainerRef.current.scrollHeight;\r\n        chatContainerRef.current.scrollTop = scrollHeight;\r\n      }\r\n    };\r\n\r\n    // 즉시 실행\r\n    scrollToBottom();\r\n\r\n    // DOM 업데이트 후 다시 실행\r\n    const timer1 = setTimeout(scrollToBottom, 0);\r\n    // 콘텐츠 로드 후 실행\r\n    const timer2 = setTimeout(scrollToBottom, 100);\r\n    // 더 긴 시간 후 다시 실행 (느린 렌더링, 이미지 로드 등 대비)\r\n    const timer3 = setTimeout(scrollToBottom, 500);\r\n\r\n    return () => {\r\n      clearTimeout(timer1);\r\n      clearTimeout(timer2);\r\n      clearTimeout(timer3);\r\n    };\r\n  }, [messages, isLoading]);\r\n  \r\n  // 메시지 전송 함수\r\n  const sendMessage = async (query) => {\r\n    if (!query.trim()) return;\r\n    \r\n    // 사용자 메시지 추가\r\n    const userMessage = { role: 'user', content: query };\r\n    const updatedMessages = [...messages, userMessage];\r\n    saveMessages(updatedMessages);\r\n    \r\n    // 사용자 메시지 추가 후 스크롤\r\n    setTimeout(() => {\r\n      if (chatContainerRef.current) {\r\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n      }\r\n    }, 0);\r\n    \r\n    // API 호출\r\n    setIsLoading(true);\r\n    try {\r\n      const result = await askLLMApi(query, language);\r\n      \r\n      if (result.success) {\r\n        // 성공 응답 처리\r\n        const assistantMessage = {\r\n          role: 'assistant',\r\n          content: result.data.result || '응답을 받지 못했습니다.'\r\n        };\r\n        saveMessages([...updatedMessages, assistantMessage]);\r\n        \r\n        // 응답 메시지 추가 후 스크롤\r\n        setTimeout(() => {\r\n          if (chatContainerRef.current) {\r\n            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n          }\r\n        }, 0);\r\n      } else {\r\n        // 오류 응답 처리\r\n        const errorMessage = {\r\n          role: 'assistant',\r\n          content: `오류가 발생했습니다: ${result.error || '알 수 없는 오류'}`,\r\n          isError: true\r\n        };\r\n        saveMessages([...updatedMessages, errorMessage]);\r\n      }\r\n    } catch (error) {\r\n      console.error('메시지 전송 중 오류:', error);\r\n      const errorMessage = {\r\n        role: 'assistant',\r\n        content: '오류가 발생했습니다. 나중에 다시 시도해주세요.',\r\n        isError: true\r\n      };\r\n      saveMessages([...updatedMessages, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  \r\n  // 대표 질문 처리 함수\r\n  const handleSampleQuestion = (question) => {\r\n    sendMessage(question);\r\n  };\r\n  \r\n  return {\r\n    messages,\r\n    isLoading,\r\n    language,\r\n    chatContainerRef,\r\n    sendMessage,\r\n    clearMessages,\r\n    setLanguage,\r\n    handleSampleQuestion\r\n  };\r\n};\r\n\r\nexport default useChat; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}