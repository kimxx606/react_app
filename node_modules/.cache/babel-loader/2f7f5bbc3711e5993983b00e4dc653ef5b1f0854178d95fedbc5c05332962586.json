{"ast":null,"code":"import axios from 'axios';\n\n// B2B Query 전용 axios 인스턴스 생성\nconst b2bQueryApi = axios.create({\n  baseURL: 'https://b2b-query.mkdev-kic.intellytics.lge.com',\n  timeout: 30000,\n  // 30초\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * B2B Query API와 통신하는 함수\r\n * @param {string} query - 사용자 질의 내용\r\n * @param {string} language - 언어 코드 (기본값: \"ko\")\r\n * @param {Object} additionalParams - 서비스별 추가 파라미터\r\n * @returns {Promise<Object>} API 응답 결과\r\n */\nexport const askB2BQueryApi = async (query, language = \"ko\", additionalParams = {}) => {\n  try {\n    // API 요청 데이터 준비\n    query = query.replace(\"\\n\", \"\");\n    const payload = {\n      query,\n      language,\n      ...additionalParams\n    };\n\n    // API 호출 (B2B Query 엔드포인트로 직접 연결)\n    console.log(\"🔍 B2B Query API 호출\");\n    const response = await b2bQueryApi.post('/b2b_query', payload);\n    console.log(\"📥 B2B Query 응답:\", response.data);\n\n    // 응답 데이터 처리 - API 응답 형태에 맞게 필요시 수정\n    return {\n      success: true,\n      data: {\n        result: response.data.answer || response.data.result || response.data,\n        sources: response.data.sources || []\n      }\n    };\n  } catch (error) {\n    console.error(\"🔥 B2B Query API 에러:\", error);\n    console.error(\"📦 error.response:\", error.response);\n    console.error(\"📡 error.request:\", error.request);\n\n    // 오류 유형에 따른 메시지 생성\n    let errorMessage = '알 수 없는 오류가 발생했습니다.';\n    if (error.code === 'ECONNABORTED') {\n      errorMessage = 'B2B Query API 요청 시간이 초과되었습니다. 나중에 다시 시도해주세요.';\n    } else if (error.response) {\n      // 서버에서 응답을 받았지만 오류 상태 코드가 반환된 경우\n      errorMessage = `B2B Query 서버 오류: ${error.response.status}`;\n      if (error.response.data && error.response.data.error) {\n        errorMessage = error.response.data.error;\n      }\n    } else if (error.request) {\n      // 요청이 이루어졌지만 응답을 받지 못한 경우\n      errorMessage = 'B2B Query API 서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\n    }\n    return {\n      success: false,\n      error: errorMessage\n    };\n  }\n};\n\n// B2B Query API 서비스 객체 정의\nconst b2bQueryApiService = {\n  askB2BQueryApi\n};\nexport default b2bQueryApiService;","map":{"version":3,"names":["axios","b2bQueryApi","create","baseURL","timeout","headers","askB2BQueryApi","query","language","additionalParams","replace","payload","console","log","response","post","data","success","result","answer","sources","error","request","errorMessage","code","status","b2bQueryApiService"],"sources":["D:/01_study/react_app/src/services/b2bQueryApiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// B2B Query 전용 axios 인스턴스 생성\r\nconst b2bQueryApi = axios.create({\r\n  baseURL: 'https://b2b-query.mkdev-kic.intellytics.lge.com',\r\n  timeout: 30000, // 30초\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n/**\r\n * B2B Query API와 통신하는 함수\r\n * @param {string} query - 사용자 질의 내용\r\n * @param {string} language - 언어 코드 (기본값: \"ko\")\r\n * @param {Object} additionalParams - 서비스별 추가 파라미터\r\n * @returns {Promise<Object>} API 응답 결과\r\n */\r\nexport const askB2BQueryApi = async (query, language = \"ko\", additionalParams = {}) => {\r\n  try {\r\n    // API 요청 데이터 준비\r\n    query = query.replace(\"\\n\", \"\");\r\n    const payload = {\r\n      query,\r\n      language,\r\n      ...additionalParams\r\n    };\r\n    \r\n    // API 호출 (B2B Query 엔드포인트로 직접 연결)\r\n    console.log(\"🔍 B2B Query API 호출\");\r\n    const response = await b2bQueryApi.post('/b2b_query', payload);\r\n    console.log(\"📥 B2B Query 응답:\", response.data);\r\n    \r\n    // 응답 데이터 처리 - API 응답 형태에 맞게 필요시 수정\r\n    return { \r\n      success: true, \r\n      data: {\r\n        result: response.data.answer || response.data.result || response.data,\r\n        sources: response.data.sources || []\r\n      } \r\n    };\r\n  } catch (error) {\r\n    console.error(\"🔥 B2B Query API 에러:\", error);\r\n    console.error(\"📦 error.response:\", error.response);\r\n    console.error(\"📡 error.request:\", error.request);\r\n    \r\n    // 오류 유형에 따른 메시지 생성\r\n    let errorMessage = '알 수 없는 오류가 발생했습니다.';\r\n    \r\n    if (error.code === 'ECONNABORTED') {\r\n      errorMessage = 'B2B Query API 요청 시간이 초과되었습니다. 나중에 다시 시도해주세요.';\r\n    } else if (error.response) {\r\n      // 서버에서 응답을 받았지만 오류 상태 코드가 반환된 경우\r\n      errorMessage = `B2B Query 서버 오류: ${error.response.status}`;\r\n      if (error.response.data && error.response.data.error) {\r\n        errorMessage = error.response.data.error;\r\n      }\r\n    } else if (error.request) {\r\n      // 요청이 이루어졌지만 응답을 받지 못한 경우\r\n      errorMessage = 'B2B Query API 서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요.';\r\n    }\r\n    \r\n    return { success: false, error: errorMessage };\r\n  }\r\n};\r\n\r\n// B2B Query API 서비스 객체 정의\r\nconst b2bQueryApiService = {\r\n  askB2BQueryApi\r\n};\r\n\r\nexport default b2bQueryApiService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAE,iDAAiD;EAC1DC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,GAAG,IAAI,EAAEC,gBAAgB,GAAG,CAAC,CAAC,KAAK;EACrF,IAAI;IACF;IACAF,KAAK,GAAGA,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IAC/B,MAAMC,OAAO,GAAG;MACdJ,KAAK;MACLC,QAAQ;MACR,GAAGC;IACL,CAAC;;IAED;IACAG,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMC,QAAQ,GAAG,MAAMb,WAAW,CAACc,IAAI,CAAC,YAAY,EAAEJ,OAAO,CAAC;IAC9DC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAACE,IAAI,CAAC;;IAE9C;IACA,OAAO;MACLC,OAAO,EAAE,IAAI;MACbD,IAAI,EAAE;QACJE,MAAM,EAAEJ,QAAQ,CAACE,IAAI,CAACG,MAAM,IAAIL,QAAQ,CAACE,IAAI,CAACE,MAAM,IAAIJ,QAAQ,CAACE,IAAI;QACrEI,OAAO,EAAEN,QAAQ,CAACE,IAAI,CAACI,OAAO,IAAI;MACpC;IACF,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5CT,OAAO,CAACS,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACP,QAAQ,CAAC;IACnDF,OAAO,CAACS,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACC,OAAO,CAAC;;IAEjD;IACA,IAAIC,YAAY,GAAG,oBAAoB;IAEvC,IAAIF,KAAK,CAACG,IAAI,KAAK,cAAc,EAAE;MACjCD,YAAY,GAAG,8CAA8C;IAC/D,CAAC,MAAM,IAAIF,KAAK,CAACP,QAAQ,EAAE;MACzB;MACAS,YAAY,GAAG,oBAAoBF,KAAK,CAACP,QAAQ,CAACW,MAAM,EAAE;MAC1D,IAAIJ,KAAK,CAACP,QAAQ,CAACE,IAAI,IAAIK,KAAK,CAACP,QAAQ,CAACE,IAAI,CAACK,KAAK,EAAE;QACpDE,YAAY,GAAGF,KAAK,CAACP,QAAQ,CAACE,IAAI,CAACK,KAAK;MAC1C;IACF,CAAC,MAAM,IAAIA,KAAK,CAACC,OAAO,EAAE;MACxB;MACAC,YAAY,GAAG,gDAAgD;IACjE;IAEA,OAAO;MAAEN,OAAO,EAAE,KAAK;MAAEI,KAAK,EAAEE;IAAa,CAAC;EAChD;AACF,CAAC;;AAED;AACA,MAAMG,kBAAkB,GAAG;EACzBpB;AACF,CAAC;AAED,eAAeoB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}