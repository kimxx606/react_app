{"ast":null,"code":"var _jsxFileName = \"D:\\\\01_study\\\\streamlit_front\\\\intellytics-react-app\\\\src\\\\contexts\\\\SessionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// 세션 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionContext = /*#__PURE__*/createContext();\n\n// 로컬 스토리지 키\nconst STORAGE_KEY = 'intellytics-session';\n\n// 세션 제공자 컴포넌트\nexport const SessionProvider = ({\n  children\n}) => {\n  _s();\n  // 로컬 스토리지에서 세션 상태 로드 또는 초기 상태 설정\n  const [sessionState, setSessionState] = useState(() => {\n    try {\n      const storedData = localStorage.getItem(STORAGE_KEY);\n      return storedData ? JSON.parse(storedData) : {};\n    } catch (error) {\n      console.error('로컬 스토리지에서 세션 데이터를 로드하는 중 오류:', error);\n      return {};\n    }\n  });\n\n  // 세션 상태가 변경될 때마다 로컬 스토리지에 저장\n  useEffect(() => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(sessionState));\n    } catch (error) {\n      console.error('세션 데이터를 로컬 스토리지에 저장하는 중 오류:', error);\n    }\n  }, [sessionState]);\n\n  // 세션 상태 업데이트 함수\n  const updateSessionState = (key, value) => {\n    setSessionState(prevState => ({\n      ...prevState,\n      [key]: value\n    }));\n  };\n\n  // 세션 상태 초기화 함수 (특정 키만 또는 전체)\n  const resetSessionState = (key = null) => {\n    if (key) {\n      setSessionState(prevState => {\n        const newState = {\n          ...prevState\n        };\n        delete newState[key];\n        return newState;\n      });\n    } else {\n      setSessionState({});\n    }\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    sessionState,\n    updateSessionState,\n    resetSessionState\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n// 세션 컨텍스트를 사용하기 위한 커스텀 훅\n_s(SessionProvider, \"J562XO0FdY1s7tuF7z41cEI95fg=\");\n_c = SessionProvider;\nexport const useSession = () => {\n  _s2();\n  const context = useContext(SessionContext);\n  if (!context) {\n    throw new Error('useSession은 SessionProvider 내에서 사용해야 합니다');\n  }\n  return context;\n};\n_s2(useSession, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","SessionContext","STORAGE_KEY","SessionProvider","children","_s","sessionState","setSessionState","storedData","localStorage","getItem","JSON","parse","error","console","setItem","stringify","updateSessionState","key","value","prevState","resetSessionState","newState","contextValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSession","_s2","context","Error","$RefreshReg$"],"sources":["D:/01_study/streamlit_front/intellytics-react-app/src/contexts/SessionContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// 세션 컨텍스트 생성\r\nconst SessionContext = createContext();\r\n\r\n// 로컬 스토리지 키\r\nconst STORAGE_KEY = 'intellytics-session';\r\n\r\n// 세션 제공자 컴포넌트\r\nexport const SessionProvider = ({ children }) => {\r\n  // 로컬 스토리지에서 세션 상태 로드 또는 초기 상태 설정\r\n  const [sessionState, setSessionState] = useState(() => {\r\n    try {\r\n      const storedData = localStorage.getItem(STORAGE_KEY);\r\n      return storedData ? JSON.parse(storedData) : {};\r\n    } catch (error) {\r\n      console.error('로컬 스토리지에서 세션 데이터를 로드하는 중 오류:', error);\r\n      return {};\r\n    }\r\n  });\r\n\r\n  // 세션 상태가 변경될 때마다 로컬 스토리지에 저장\r\n  useEffect(() => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(sessionState));\r\n    } catch (error) {\r\n      console.error('세션 데이터를 로컬 스토리지에 저장하는 중 오류:', error);\r\n    }\r\n  }, [sessionState]);\r\n\r\n  // 세션 상태 업데이트 함수\r\n  const updateSessionState = (key, value) => {\r\n    setSessionState(prevState => ({\r\n      ...prevState,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  // 세션 상태 초기화 함수 (특정 키만 또는 전체)\r\n  const resetSessionState = (key = null) => {\r\n    if (key) {\r\n      setSessionState(prevState => {\r\n        const newState = { ...prevState };\r\n        delete newState[key];\r\n        return newState;\r\n      });\r\n    } else {\r\n      setSessionState({});\r\n    }\r\n  };\r\n\r\n  // 컨텍스트 값\r\n  const contextValue = {\r\n    sessionState,\r\n    updateSessionState,\r\n    resetSessionState\r\n  };\r\n\r\n  return (\r\n    <SessionContext.Provider value={contextValue}>\r\n      {children}\r\n    </SessionContext.Provider>\r\n  );\r\n};\r\n\r\n// 세션 컨텍스트를 사용하기 위한 커스텀 훅\r\nexport const useSession = () => {\r\n  const context = useContext(SessionContext);\r\n  if (!context) {\r\n    throw new Error('useSession은 SessionProvider 내에서 사용해야 합니다');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;;AAEtC;AACA,MAAMO,WAAW,GAAG,qBAAqB;;AAEzC;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACrD,IAAI;MACF,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAACR,WAAW,CAAC;MACpD,OAAOM,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,CAAC,CAAC;IACX;EACF,CAAC,CAAC;;EAEF;EACAf,SAAS,CAAC,MAAM;IACd,IAAI;MACFW,YAAY,CAACM,OAAO,CAACb,WAAW,EAAES,IAAI,CAACK,SAAS,CAACV,YAAY,CAAC,CAAC;IACjE,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,CAACP,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMW,kBAAkB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IACzCZ,eAAe,CAACa,SAAS,KAAK;MAC5B,GAAGA,SAAS;MACZ,CAACF,GAAG,GAAGC;IACT,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAGA,CAACH,GAAG,GAAG,IAAI,KAAK;IACxC,IAAIA,GAAG,EAAE;MACPX,eAAe,CAACa,SAAS,IAAI;QAC3B,MAAME,QAAQ,GAAG;UAAE,GAAGF;QAAU,CAAC;QACjC,OAAOE,QAAQ,CAACJ,GAAG,CAAC;QACpB,OAAOI,QAAQ;MACjB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLf,eAAe,CAAC,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMgB,YAAY,GAAG;IACnBjB,YAAY;IACZW,kBAAkB;IAClBI;EACF,CAAC;EAED,oBACErB,OAAA,CAACC,cAAc,CAACuB,QAAQ;IAACL,KAAK,EAAEI,YAAa;IAAAnB,QAAA,EAC1CA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;;AAED;AAAAvB,EAAA,CAxDaF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAyD5B,OAAO,MAAM2B,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,OAAO,GAAGpC,UAAU,CAACK,cAAc,CAAC;EAC1C,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,UAAU;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}