{"ast":null,"code":"var _jsxFileName = \"D:\\\\01_study\\\\react_app\\\\src\\\\components\\\\Chat\\\\ChatInterface.jsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import useChat from '../../hooks/useChat';\n// import ChatMessage from './ChatMessage';\n// import ChatInput from './ChatInput';\n// import SampleQuestions from './SampleQuestions';\n// import Spinner from '../UI/Spinner';\n\n// const ChatInterface = ({ serviceId }) => {\n//   const SERVICE_NAME = \"Intellytics AI 대화 서비스\";\n//   const SERVICE_DESCRIPTION = \"AI와 대화하며 다양한 질문에 대한 답변을 받아보세요.\";\n\n//   const SAMPLE_QUESTIONS = [\n//     \"이 서비스는 어떤 기능을 제공하나요?\",\n//     \"NPS 분석이란 무엇인가요?\",\n//     \"VOC 데이터를 어떻게 분석할 수 있나요?\",\n//     \"D2C 분석에 대해 설명해주세요.\"\n//   ];\n\n//   const {\n//     messages,\n//     isLoading,\n//     chatContainerRef,\n//     bottomRef,\n//     sendMessage,\n//     handleSampleQuestion\n//   } = useChat(serviceId);\n\n//   return (\n//     <div className=\"chat-interface\">\n//       {/* 상단 제목 */}\n//       <div className=\"service-header\">\n//         <h2 className=\"main-title\">{SERVICE_NAME}</h2>\n//         <p className=\"service-description\">{SERVICE_DESCRIPTION}</p>\n//       </div>\n\n//       {/* 대표 질문 (초기 화면에만 표시) */}\n//       {(\n//         <SampleQuestions\n//           questions={SAMPLE_QUESTIONS}\n//           onSelectQuestion={handleSampleQuestion}\n//           isLoading={isLoading}\n//         />\n//       )}\n\n//       {/* 💬 채팅 메시지 영역 */}\n//       <div className=\"chat-container\" ref={chatContainerRef}>\n//         {messages.map((message, index) => (\n//           <ChatMessage\n//             key={index}\n//             role={message.role}\n//             content={message.content}\n//             isError={message.isError}\n//           />\n//         ))}\n\n//         {isLoading && (\n//           <div className=\"loading-message\">\n//             <Spinner />\n//           </div>\n//         )}\n\n//         {/* 자동 스크롤 포인트 */}\n//         <div ref={bottomRef} />\n//       </div>\n\n//       {/* 🧾 입력창: 항상 하단 고정 */}\n//       <div className=\"chat-input-container\">\n//         <ChatInput\n//           onSendMessage={sendMessage}\n//           isLoading={isLoading}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChatInterface;\n\nimport React from 'react';\nimport useChat from '../../hooks/useChat';\nimport ChatMessage from './ChatMessage';\nimport ChatInput from './ChatInput';\nimport SampleQuestions from './SampleQuestions';\nimport Spinner from '../UI/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  serviceId,\n  SidebarContent\n}) => {\n  _s();\n  const SERVICE_NAME = \"Intellytics AI 대화 서비스\";\n  const SERVICE_DESCRIPTION = \"AI와 대화하며 다양한 질문에 대한 답변을 받아보세요.\";\n  const SAMPLE_QUESTIONS = [\"이 서비스는 어떤 기능을 제공하나요?\", \"NPS 분석이란 무엇인가요?\", \"VOC 데이터를 어떻게 분석할 수 있나요?\", \"D2C 분석에 대해 설명해주세요.\"];\n  const {\n    messages,\n    isLoading,\n    chatContainerRef,\n    bottomRef,\n    sendMessage,\n    handleSampleQuestion\n  } = useChat(serviceId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"service-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"main-title\",\n        children: SERVICE_NAME\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"service-description\",\n        children: SERVICE_DESCRIPTION\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), messages.length === 0 && /*#__PURE__*/_jsxDEV(SampleQuestions, {\n      questions: SAMPLE_QUESTIONS,\n      onSelectQuestion: handleSampleQuestion,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        role: message.role,\n        content: message.content,\n        isError: message.isError\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: /*#__PURE__*/_jsxDEV(ChatInput, {\n        onSendMessage: sendMessage,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), SidebarContent && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-sidebar-extra\",\n      children: SidebarContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"a1HvJNYFlydPrfqYqYQZBz608P8=\", false, function () {\n  return [useChat];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useChat","ChatMessage","ChatInput","SampleQuestions","Spinner","jsxDEV","_jsxDEV","ChatInterface","serviceId","SidebarContent","_s","SERVICE_NAME","SERVICE_DESCRIPTION","SAMPLE_QUESTIONS","messages","isLoading","chatContainerRef","bottomRef","sendMessage","handleSampleQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","questions","onSelectQuestion","ref","map","message","index","role","content","isError","onSendMessage","_c","$RefreshReg$"],"sources":["D:/01_study/react_app/src/components/Chat/ChatInterface.jsx"],"sourcesContent":["// import React from 'react';\r\n// import useChat from '../../hooks/useChat';\r\n// import ChatMessage from './ChatMessage';\r\n// import ChatInput from './ChatInput';\r\n// import SampleQuestions from './SampleQuestions';\r\n// import Spinner from '../UI/Spinner';\r\n\r\n// const ChatInterface = ({ serviceId }) => {\r\n//   const SERVICE_NAME = \"Intellytics AI 대화 서비스\";\r\n//   const SERVICE_DESCRIPTION = \"AI와 대화하며 다양한 질문에 대한 답변을 받아보세요.\";\r\n\r\n//   const SAMPLE_QUESTIONS = [\r\n//     \"이 서비스는 어떤 기능을 제공하나요?\",\r\n//     \"NPS 분석이란 무엇인가요?\",\r\n//     \"VOC 데이터를 어떻게 분석할 수 있나요?\",\r\n//     \"D2C 분석에 대해 설명해주세요.\"\r\n//   ];\r\n\r\n//   const {\r\n//     messages,\r\n//     isLoading,\r\n//     chatContainerRef,\r\n//     bottomRef,\r\n//     sendMessage,\r\n//     handleSampleQuestion\r\n//   } = useChat(serviceId);\r\n\r\n//   return (\r\n//     <div className=\"chat-interface\">\r\n//       {/* 상단 제목 */}\r\n//       <div className=\"service-header\">\r\n//         <h2 className=\"main-title\">{SERVICE_NAME}</h2>\r\n//         <p className=\"service-description\">{SERVICE_DESCRIPTION}</p>\r\n//       </div>\r\n\r\n//       {/* 대표 질문 (초기 화면에만 표시) */}\r\n//       {(\r\n//         <SampleQuestions\r\n//           questions={SAMPLE_QUESTIONS}\r\n//           onSelectQuestion={handleSampleQuestion}\r\n//           isLoading={isLoading}\r\n//         />\r\n//       )}\r\n\r\n//       {/* 💬 채팅 메시지 영역 */}\r\n//       <div className=\"chat-container\" ref={chatContainerRef}>\r\n//         {messages.map((message, index) => (\r\n//           <ChatMessage\r\n//             key={index}\r\n//             role={message.role}\r\n//             content={message.content}\r\n//             isError={message.isError}\r\n//           />\r\n//         ))}\r\n\r\n//         {isLoading && (\r\n//           <div className=\"loading-message\">\r\n//             <Spinner />\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* 자동 스크롤 포인트 */}\r\n//         <div ref={bottomRef} />\r\n//       </div>\r\n\r\n//       {/* 🧾 입력창: 항상 하단 고정 */}\r\n//       <div className=\"chat-input-container\">\r\n//         <ChatInput\r\n//           onSendMessage={sendMessage}\r\n//           isLoading={isLoading}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChatInterface;\r\n\r\nimport React from 'react';\r\nimport useChat from '../../hooks/useChat';\r\nimport ChatMessage from './ChatMessage';\r\nimport ChatInput from './ChatInput';\r\nimport SampleQuestions from './SampleQuestions';\r\nimport Spinner from '../UI/Spinner';\r\n\r\nconst ChatInterface = ({ serviceId, SidebarContent }) => {\r\n  const SERVICE_NAME = \"Intellytics AI 대화 서비스\";\r\n  const SERVICE_DESCRIPTION = \"AI와 대화하며 다양한 질문에 대한 답변을 받아보세요.\";\r\n\r\n  const SAMPLE_QUESTIONS = [\r\n    \"이 서비스는 어떤 기능을 제공하나요?\",\r\n    \"NPS 분석이란 무엇인가요?\",\r\n    \"VOC 데이터를 어떻게 분석할 수 있나요?\",\r\n    \"D2C 분석에 대해 설명해주세요.\"\r\n  ];\r\n\r\n  const {\r\n    messages,\r\n    isLoading,\r\n    chatContainerRef,\r\n    bottomRef,\r\n    sendMessage,\r\n    handleSampleQuestion\r\n  } = useChat(serviceId);\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      {/* 상단 제목 */}\r\n      <div className=\"service-header\">\r\n        <h2 className=\"main-title\">{SERVICE_NAME}</h2>\r\n        <p className=\"service-description\">{SERVICE_DESCRIPTION}</p>\r\n      </div>\r\n\r\n      {/* 대표 질문 (초기 화면에만 표시) */}\r\n      {messages.length === 0 && (\r\n        <SampleQuestions\r\n          questions={SAMPLE_QUESTIONS}\r\n          onSelectQuestion={handleSampleQuestion}\r\n          isLoading={isLoading}\r\n        />\r\n      )}\r\n\r\n      {/* 💬 채팅 메시지 영역 */}\r\n      <div className=\"chat-container\" ref={chatContainerRef}>\r\n        {messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={index}\r\n            role={message.role}\r\n            content={message.content}\r\n            isError={message.isError}\r\n          />\r\n        ))}\r\n\r\n        {isLoading && (\r\n          <div className=\"loading-message\">\r\n            <Spinner />\r\n          </div>\r\n        )}\r\n\r\n        {/* 자동 스크롤 포인트 */}\r\n        <div ref={bottomRef} />\r\n      </div>\r\n\r\n      {/* 🧾 입력창: 항상 하단 고정 */}\r\n      <div className=\"chat-input-container\">\r\n        <ChatInput\r\n          onSendMessage={sendMessage}\r\n          isLoading={isLoading}\r\n        />\r\n      </div>\r\n\r\n      {/* 🔧 각 페이지 전용 사이드바 내용 (선택적 렌더링) */}\r\n      {SidebarContent && (\r\n        <div className=\"chat-sidebar-extra\">\r\n          {SidebarContent}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}